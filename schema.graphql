type Factory @entity {
  id: ID!
  address: String!
  owner: Account!
  implementationCount: Int!
  collectionCount: Int!
  nftCount: Int!

  createdAtTimestamp: BigInt!

  implementations: [Implementation!]! @derivedFrom(field: "factory")
}

type Implementation @entity {
  id: ID!
  name: String!
  address: String!
  factory: Factory!
  collectionCount: Int!
  nftCount: Int!

  createdAtTimestamp: BigInt!

  collections: [Collection!]! @derivedFrom(field: "implementation")
}

type Collection @entity {
  id: ID!
  name: String!
  symbol: String!
  address: String!
  nftCount: Int!
  forkCount: Int!

  implementation: Implementation!
  creator: Account!
  factory: Factory! # denormalized (implementation -> factory)
  canonicalOwner: Account! # denormalized (fork[0] -> owner)
  canonicalEngine: Engine! # denormalized (fork[0] -> engine)

  createdAtTimestamp: BigInt!
  lastActivityAtTimestamp: BigInt!

  forks: [Fork!]! @derivedFrom(field: "collection")
  nfts: [NFT!]! @derivedFrom(field: "collection")
  nftOwners: [NFTOwner!]! @derivedFrom(field: "collection")
}

type Fork @entity {
  id: ID!
  forkId: BigInt!
  collection: Collection!
  owner: Account!
  engine: Engine!

  createdAtTimestamp: BigInt!

  nfts: [NFT!]! @derivedFrom(field: "fork")
  storage: [ForkStorageValue!]! @derivedFrom(field: "fork")
}

type Engine @entity {
  id: ID!
  address: String!
  name: String!

  createdAtTimestamp: BigInt!

  forks: [Fork!]! @derivedFrom(field: "engine")
}

type NFT @entity {
  id: ID!
  tokenId: BigInt!
  totalSupply: BigInt!
  createdByEngine: Engine!
  fork: Fork!
  collection: Collection! # denormalized

  createdAtTimestamp: BigInt!
  lastActivityAtTimestamp: BigInt!

  owners: [NFTOwner!]! @derivedFrom(field: "nft")
  storage: [TokenStorageValue!]! @derivedFrom(field: "nft")
}

type NFTOwner @entity {
  id: ID!
  nft: NFT!
  owner: Account!
  balance: BigInt!
  collection: Collection! # denormalized

  createdAtTimestamp: BigInt!
  lastActivityAtTimestamp: BigInt!
}

enum StorageLocation {
  ENGINE
  MINT_DATA
  FRAMEWORK
}

enum StorageType {
  INT
  STRING
}

type TokenStorageValue @entity {
  id: ID!
  nft: NFT!
  location: StorageLocation!
  storageType: StorageType!
  collection: Collection! # denormalized

  key: String!
  stringValue: String # null if int
  intValue: BigInt # null if string

  createdAtTimestamp: BigInt!
  updatedAtTimestamp: BigInt!
}

type ForkStorageValue @entity {
  id: ID!
  fork: Fork!
  location: StorageLocation!
  storageType: StorageType!
  collection: Collection! # denormalized

  key: String!
  stringValue: String # null if int
  intValue: BigInt # null if string

  createdAtTimestamp: BigInt!
  updatedAtTimestamp: BigInt!
}


type Account @entity {
  id: ID!
  address: String!

  createdAtTimestamp: BigInt!

  factories: [Factory!]! @derivedFrom(field: "owner")
  collections: [Collection!]! @derivedFrom(field: "canonicalOwner")
  forks: [Fork!]! @derivedFrom(field: "owner")
  nfts: [NFTOwner!]! @derivedFrom(field: "owner")
}

